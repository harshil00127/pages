var os = require('os');
var path = require('path');
var util = require('./util');

var Local = function (options, _global) {

  this.options = this.populateOptions(options, _global);
  
  util.mixin(this, require('./support/base'));
  this.debug = util.debug(process.env.DEBUG);
  
  process.on('message', this.bind(this.onMessage, this));
};


Local.prototype.populateOptions = function (options, g) {

  if (g == null) {
    return options;
  }
  
  if (options.server != null) {
    options.file = path.basename(g.process.mainModule.filename);
    
    var packageObj = {};
    try {
      packageObj = require(path.dirname(g.process.mainModule.filename) + "/package.json");
    }
    catch (e) {
      // no package.json to populate from
      console.log('populateOptions: error obtaining package.json:', e);
    }
    
    if (packageObj.dependencies && 
        packageObj.dependencies[options.server]) {
      var pattern =  /(\d+[.]\d+[.]\d+)[\-a-zA-Z0-9]?/;
      
      var match = pattern.exec(packageObj.dependencies[options.server]);
      if (match !== null) {
        options.version = match[0];
      }
    }
  }
  
  return options;
}


Local.prototype.send = function (obj) {

  if (process.send) {
    process.send(obj);
  }
}

Local.prototype.onMessage = function (msg) {

  var data = null;
  
  switch (msg.action) {
    case 'mem':
      data = process.memoryUsage();
      break;
    case 'load':
      data = os.loadavg();
      break;
    case 'info':
      data = this.options;
      break;
    default: 
      this.debug("Local:: unexpected msg:", msg);
      break;
  }
  
  this.send({action: msg.action, data: data});
}

module.exports = Local;